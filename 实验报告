试验报告
题目：用单项循环列表存储结构模拟约瑟夫环
班级：电信1809 姓名：刘立同 学号：U201813499 完成日期：2019.3.25

一、需求分析
1、编号为1、2、…n的n个人按顺时针方向围坐一圈，每个人持有一个密码（正数）。一开始任选一个正整数作为报数上限值m，从第一个开始按顺时针方向自1开始顺序报数，报到m时停止报数。报m的人出列，将他的密码作为新的m值，从他在顺时针方向上的下一个人开始重新从1报数，如此下去，直到所有人全部出列为止。试设计一个程序求出出列顺序。
2执行程序的命令包括：
（1）定义结构体；（2）存储人的序号和密码；（3）定义节点；（4）创建循环链表函数；（5）创建密码输入函数；（6）创建输出函数；（7）搜索循环列表，删除节点；（8）主函数；
3测试数据
（1）n=7,m=20,password=3 1 7 2 4 8 4 result=6 1 4 7 2 3 5
(2)  n=6,m=8,password=2 5 6 4 7 8 5 reault=2 1 4 5 6 3
(3)  n=8,m=16,password=5 6 4 8 9 4 2 1 4 result=8 1 6 4 3 5 7 2

二、概要设计
为实现上述程序功能，应以单向循环链表结构存储。
带头节点的线性链表类型定义为：
Tyoedef struct LNode{  //节点类型
ElemType     data;
Struct LNode  *next;
}*Link,*Position;
Typedef struct{   //链表类型
Link  head,tail;   //分别指向线性链表中的头结点和最后一个节点
Int  len;         //指示线性链表中数据元素个数
}LinkList;
Status MakeNode( Link &p,ElemType e);
      //分配由p指向的值为e的结点，并返回OK；若分配失败，则返回ERROR
Void FreeNode( Link &p);
//释放p所指结点
Status InitList( LinkList &L);
//构造一个空的线性链表L
Status DestroyList( LinkList &L);
//销毁线性链表L，L不再存在
Status ClearList( LinkList &L);
//将线性链表L重置为空表，并释放原链表的节点空间
Status InsFirst( Link h,Link s);
//已知h指向线性链表的头结点，将s所指结点插入在第一个结点之前
Status Delfirst( Link h,Link &q);
//已知h指向线性链表的头结点，删除链表中的第一个结点并以q返回

三、详细设计
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>

typedef struct LNode
{
    int number,password;
    struct LNode*next;
}SLX, *pSLX;
//struct LNode*head,*p,*pt;

pSLX CreatListFunction(int n)
{
    int k;
    pSLX head=(pSLX)malloc(sizeof(SLX));
    pSLX p=head;
    for(int i=1; i <= n; i++)
    {
        pSLX pt=(pSLX)malloc(sizeof(SLX));
        p->next=pt;
        printf("\n请输入密码:\n");
        scanf("%d",&k);
        p->number = i;
        p->password = k;
        p=pt;
    }
    p->next=head->next;
    free(head);
    //return tail
    pSLX q = p;
    for(int i = 1; i<= 5; ++i){
        q = q->next;
        printf(q->number);
        printf(q->password);
    }
    exit(0);

    return p;
}



int OutListFunction(int m, int n, pSLX node){
    int i, a;
    pSLX pt = node;//tail
    for(i=1; i<=n; i++)
    {
        for(a=1; a<m; a++)
        {
            pt = pt->next;
        }

        pSLX temp = pt->next;
        m=temp->password;
        printf("%d", temp->number);
        exit(0);
        //DELETE PT->NEXT
        pt->next = pt->next->next;
        free(pt->next);
        pt = pt->next;
    }
    return 0;
}
void main()
{
    int m,n;
    printf("\n参数m,n分别为传递报数上限值和人数\n");
    printf("\n请输入m和n:\n");
    scanf("%d%d",&m, &n);
    pSLX tail = CreatListFunction(n);
    //printf("\n出队的人依次是；\n");
    //OutListFunction(m, n, tail);
}
四、调试分析
1、由于对单向循环链表的了解不够清晰，在设计算法的时候导致整体向后移动了一位。
2、算法的时空分析
（1）因为有n个人需要进行n次遍历，有上限是m，所以算法需要进行m*n次，时间复杂度是O（n^2）。
